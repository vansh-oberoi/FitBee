from flask import Flask, render_template, request, redirect, url_for, session
import pandas as pd
from catboost import CatBoostClassifier
import sqlite3
import pickle
import bcrypt
import os

app = Flask(__name__)
app.secret_key = os.getenv('FLASK_SECRET_KEY', 'your_secret_key')


# Load the dataset and the model
file_path = '/Users/vanshoberoi/Desktop/Final_Exercise_Recommendations_Dataset new.csv'
try:
    data = pd.read_csv(file_path)
except FileNotFoundError:
    print(f"File not found: {file_path}")
    exit(1)

data['Exercise Recommendation Plan'] = data['Exercise Recommendation Plan'].astype('category')

model_path = '/Users/vanshoberoi/Desktop/vansh_model_catboost.pkl'
try:
    model = pickle.load(open(model_path, 'rb'))
except FileNotFoundError:
    print(f"Model file not found: {model_path}")
    exit(1)

# Encodings
y = data['Recommended Exercises']
gender_encoding = {'Male': 0, 'Female': 1}
BMIcase_encoding = {val: i for i, val in enumerate(data['BMIcase'].unique())}
mp = {i: val for i, val in enumerate(y.unique())}

# Helper function to calculate BMI case
def calculate_bmicase(bmi):
    if bmi < 18.5:
        return 'Underweight'
    elif 18.5 <= bmi < 24.9:
        return 'Normal'
    elif 25 <= bmi < 29.9:
        return 'Overweight'
    else:
        return 'Obese'

# Index route
@app.route('/')
def index():
    return render_template('index.html')

# Login route
@app.route('/login', methods=['POST', 'GET'])
def login():
    if request.method == 'POST':
        name = request.form.get('name')
        email = request.form.get('email')
        password = request.form.get('password')
        if not all([name, email, password]):
            return "Missing form fields", 400
        
        hashed_password = hash_password(password)
        add_user(name, email, hashed_password)
        
        # Store session details
        session['name'] = name
        session['email'] = email
        session['password'] = hashed_password  # Store hashed password in session
        
        return redirect(url_for('service'))
    return render_template('Login.html')

# Result route to display predictions
@app.route('/result', methods=['POST'])
    @app.route('/result', methods=['POST'])
def result():
    weight = request.form.get('weight')
    height = request.form.get('height')
    age = request.form.get('age')
    gender = request.form.get('gender')

    # Try to convert inputs to the correct type
    try:
        height = float(height) / 100  # Convert height from cm to meters
        weight = float(weight)
        age = int(age)
    except ValueError:
        return "Invalid input. Please check the form and try again."

    # Calculate BMI
    bmi = weight / (height ** 2)
    bmi_case = calculate_bmicase(bmi)

    # Encode gender and BMI case
    gender_encoded = gender_encoding.get(gender, 0)
    bmi_case_encoded = BMIcase_encoding.get(bmi_case)

    # Prepare input data for the model
    input_data = pd.DataFrame({
        'Weight': [weight],
        'Height': [height],
        'Gender': [gender_encoded],
        'Age': [age],
        'BMI': [bmi],
        'BMIcase': [bmi_case_encoded]
    })

    # Make the prediction using the model (it predicts a number corresponding to the plan)
    y_pred = model.predict(input_data)
    y_pred_scalar = y_pred.item()

    # Match the prediction with the 'Exercise Recommendation Plan' in the dataset
    recommended_row = data[data['Exercise Recommendation Plan'] == y_pred_scalar]

    # Check if any row was found corresponding to the prediction
    if recommended_row.empty:
        return "No recommendation found for the input."

    # Get the exact recommended exercises and summary corresponding to the prediction
    recommended_exercise = recommended_row['Recommended Exercises'].values[0]
    recommendation_summary = recommended_row['Recommendation Summary'].values[0]

    # Render the result page with the correct recommendation and summary
    return render_template('result.html',
                           prediction=f'Recommended Exercises: {recommended_exercise}',
                           summary=f'Recommendation Summary: {recommendation_summary}')
# Create SQLite database for user data
def create_database():
    conn = sqlite3.connect('fitness.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT,
                    email TEXT NOT NULL,
                    password TEXT NOT NULL,
                    weight REAL DEFAULT NULL,
                    height REAL DEFAULT NULL,
                    age INTEGER DEFAULT NULL,
                    gender TEXT DEFAULT NULL,
                    active_time INTEGER DEFAULT NULL,
                    bmi REAL DEFAULT NULL,
                    recommendation_summary TEXT DEFAULT NULL,
                    exercise_recommendation TEXT DEFAULT NULL
                )''')
    conn.commit()
    conn.close()

# Hash the password using bcrypt
def hash_password(password):
    if isinstance(password, bytes):
        password = password.decode('utf-8')
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

# Add user details to the database
def add_user(name, email, password, weight=None, height=None, age=None, gender=None, active_time=None):
    bmi = weight / (height ** 2) if weight and height else None
    conn = sqlite3.connect('fitness.db')
    c = conn.cursor()
    c.execute('''INSERT INTO users (name, email, password, weight, height, age, gender, active_time, bmi) 
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
              (name, email, password, weight, height, age, gender, active_time, bmi))
    conn.commit()
    conn.close()

# Service route to collect user details
@app.route('/service', methods=['POST', 'GET'])
def service():
    if request.method == 'POST':
        try:
            weight = float(request.form['weight'])
            height = float(request.form['height'])
            age = int(request.form['age'])
            gender = request.form['gender']
            active_time = request.form.get('active_time')
            active_time = int(active_time) if active_time else None
        except ValueError:
            return "Invalid input. Please check the form and try again."

        # Get session data
        name = session.get('name')
        email = session.get('email')
        password = session.get('password')

        # Add user data to the database
        add_user(name, email, password, weight, height, age, gender, active_time)

        # Redirect to result page after form submission
        return redirect(url_for('result'))

    return render_template('Service.html')

# Run the app
if __name__ == '__main__':
    create_database()
    app.run(debug=True)
